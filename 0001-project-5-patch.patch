From a342d07dc1b420e059420a93fe48ce85a7912f72 Mon Sep 17 00:00:00 2001
From: Luiz Fernando Bueno Rosa <luizfernando5687@gmail.com>
Date: Sat, 23 Jul 2022 16:00:04 -0300
Subject: [PATCH] project-5-patch

---
 arch/x86/entry/syscalls/syscall_64.tbl |  3 ++
 include/linux/syscalls.h               |  4 ++
 include/uapi/asm-generic/unistd.h      |  6 +++
 kernel/Makefile                        |  2 +
 kernel/get_set_userweight.c            | 51 ++++++++++++++++++++++++++
 kernel/sys_ni.c                        |  3 ++
 6 files changed, 69 insertions(+)
 create mode 100644 kernel/get_set_userweight.c

diff --git a/arch/x86/entry/syscalls/syscall_64.tbl b/arch/x86/entry/syscalls/syscall_64.tbl
index c84d12608..434913954 100644
--- a/arch/x86/entry/syscalls/syscall_64.tbl
+++ b/arch/x86/entry/syscalls/syscall_64.tbl
@@ -372,6 +372,9 @@
 448	common	process_mrelease	sys_process_mrelease
 449	common	futex_waitv		sys_futex_waitv
 450	common	set_mempolicy_home_node	sys_set_mempolicy_home_node
+460 common  getuserweight   sys_getuserweight
+461 common  setuserweight   sys_setuserweight
+
 
 #
 # Due to a historical design error, certain syscalls are numbered differently
diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h
index a34b0f9a9..d66cb8642 100644
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@ -1269,6 +1269,10 @@ asmlinkage long sys_mmap_pgoff(unsigned long addr, unsigned long len,
 			unsigned long fd, unsigned long pgoff);
 asmlinkage long sys_old_mmap(struct mmap_arg_struct __user *arg);
 
+asmlinkage int getuserweight(int uid);
+asmlinkage int setuserweight(int uid, int weight);    
+
+
 
 /*
  * Not a real system call, but a placeholder for syscalls which are
diff --git a/include/uapi/asm-generic/unistd.h b/include/uapi/asm-generic/unistd.h
index 45fa180cc..271d59224 100644
--- a/include/uapi/asm-generic/unistd.h
+++ b/include/uapi/asm-generic/unistd.h
@@ -886,6 +886,12 @@ __SYSCALL(__NR_futex_waitv, sys_futex_waitv)
 #define __NR_set_mempolicy_home_node 450
 __SYSCALL(__NR_set_mempolicy_home_node, sys_set_mempolicy_home_node)
 
+#define __NR_getuserweight 460
+__SYSCALL(__NR_getuserweight, sys_getuserweight)
+
+#define __NR_setuserweight 461
+__SYSCALL(__NR_setuserweight, sys_setuserweight)
+
 #undef __NR_syscalls
 #define __NR_syscalls 451
 
diff --git a/kernel/Makefile b/kernel/Makefile
index a7e1f49ab..0d91b7aa9 100644
--- a/kernel/Makefile
+++ b/kernel/Makefile
@@ -158,3 +158,5 @@ $(obj)/kheaders_data.tar.xz: FORCE
 	$(call cmd,genikh)
 
 clean-files := kheaders_data.tar.xz kheaders.md5
+
+obj-y += get_set_userweight.o
diff --git a/kernel/get_set_userweight.c b/kernel/get_set_userweight.c
new file mode 100644
index 000000000..dda461a9d
--- /dev/null
+++ b/kernel/get_set_userweight.c
@@ -0,0 +1,51 @@
+#include <linux/syscalls.h>
+#include <linux/cred.h>
+#include <linux/user_namespace.h>
+
+/* user ids have to be greater than -1 and lower than 65536 */
+/* a uid = -1 represents the user owner of the process currently being run */
+/* otherwise, raise an error EINVAL and return -1 */
+
+/* weights should be greater than 0 */
+/* otherwise, raise an error EACCES and return -1*/
+
+
+int user_weight[65536] = {[0 ... 65535] = 10};
+
+/*Receives user id (uid) and user weight time quanta*/
+SYSCALL_DEFINE2(setuserweight, int __user, uid, int __user, weight) {
+
+    // printf("Syscall setuserweight received uid: %d and weight: %d\n\n", uid, weight);
+
+    if (weight < 0){
+        return -EACCES;
+    }
+
+    if (uid == -1){
+        kuid_t kuid = current_uid(); // get the real user id of the task being run
+        uid = (int) kuid.val;
+    }
+
+    if (uid < -1 || uid > 65535){
+        return -EINVAL;
+    }
+
+    user_weight[uid] = weight;
+
+    return 0;
+}
+
+SYSCALL_DEFINE1(getuserweight, int __user, uid) {
+
+    // printf("Syscall getuserweight received uid: %d\n\n", uid);
+
+    if (uid == -1){
+        kuid_t kuid = current_uid();
+        uid = kuid.val; // implicit cast
+    }
+
+    if (uid < 0 || uid > 65535){
+        return -EINVAL;
+    }
+    return user_weight[uid];
+}
\ No newline at end of file
diff --git a/kernel/sys_ni.c b/kernel/sys_ni.c
index a492f1596..1cab17b20 100644
--- a/kernel/sys_ni.c
+++ b/kernel/sys_ni.c
@@ -475,6 +475,9 @@ COND_SYSCALL(setresgid16);
 COND_SYSCALL(setresuid16);
 COND_SYSCALL(setreuid16);
 COND_SYSCALL(setuid16);
+COND_SYSCALL(getuserweight);
+COND_SYSCALL(setuserweight);
+
 
 /* restartable sequence */
 COND_SYSCALL(rseq);
-- 
2.25.1

